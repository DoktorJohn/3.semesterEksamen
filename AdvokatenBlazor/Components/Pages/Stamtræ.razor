@page "/"
@rendermode InteractiveServer

<link rel="stylesheet" href="Stamtrae.css" />
<link href="https://fonts.googleapis.com/css2?family=Crimson+Pro:wght@400;700&display=swap" rel="stylesheet">

<div class="TopBar">
    <label class="TitleClass">
        Modificér dit stamtræ
    </label>

    <label class="MarriedClass">
        Har du en ægtefælle?
        <input type="checkbox" id="marriageField" @onchange="OnMarriedChanged" />
    </label>

    <label class="ChildrenClass">
        Hvor mange børn har du?
        <input type="number" id="childrenField" value="@Client.KidsAmount" @onchange="OnKidsAmountChanged" />
    </label>
    <button class="FamilyBtn" @onclick="AddClick">
        Tilføj andre arvinger
    </button>

</div>



@if (Client.KidsAmount > 0 || Client.Married == true || HeirRepository.Instance.ReturnOther().Count > 0)
{
    <div class="inheritance-tree">
        @if (Client.Married)
        {
            <div class="married-grid">
                <div class="card h-100" style="position: relative; width: 270px;">
                    <div class="card-header bg-black text-white">
                        <h5>Ægtefælle</h5>
                    </div>

                    <div class="card-body">

                        <label class="PercentageTxt" style="color:black">
                            <input type="text" class="nameTxt" @bind="HeirRepository.Instance.Spouse.Name" />
                            <label>
                                Arvefordeling: @InheritanceCalc.CalculateForcedInheritancePercentageForMarried()% - @InheritanceCalc.CalculateInheritancePercentageForMarried()%
                            </label>
                            <br />
                            <label>
                                Arvebeløb: @InheritanceCalc.CalculateForcedInheritanceAmountForMarried() - @InheritanceCalc.CalculateInheritanceAmountForMarried()
                            </label>

                            @{
                                HeirRepository.Instance.Spouse.ForcedInheritancePercentage = InheritanceCalc.CalculateForcedInheritancePercentageForMarried();
                                HeirRepository.Instance.Spouse.InheritancePercentage = InheritanceCalc.CalculateInheritancePercentageForMarried();
                                HeirRepository.Instance.Spouse.ForcedInheritanceAmount = InheritanceCalc.CalculateForcedInheritanceAmountForMarried();
                                HeirRepository.Instance.Spouse.InheritanceAmount = InheritanceCalc.CalculateInheritanceAmountForMarried();
                            }
                        </label>
                    </div>
                </div>
            </div>
        }

        <div class="divider"></div>

        @for (int i = 0; i < HeirRepository.Instance.ReturnKids().Count; i++)
        {
            var heir = HeirRepository.Instance.ReturnKids()[i];
            heir.InheritancePercentage = InheritanceCalc.CalculateInheritancePercentageForKid();

            <div class="kids-grid">
                <div class="card h-100" style="position: relative; width: 270px;">
                    <div class="card-header bg-black text-white">
                        <h5>Barn @(i + 1)</h5>
                    </div>

                    <div class="card-body">

                        <label>
                            <input type="text" class="nameTxt" @bind="heir.Name" />
                            <label class="PercentageTxt" style="color:black">
                                <label>
                                    Arvefordeling: @InheritanceCalc.CalculateForcedInheritancePercentageForKid()% - @InheritanceCalc.CalculateInheritancePercentageForKid()%
                                </label>
                                <br />
                                <label>
                                    Arvebeløb: @InheritanceCalc.CalculateForcedInheritanceAmountForKid() - @InheritanceCalc.CalculateInheritanceAmountForKid()
                                </label>

                                @{
                                    heir.ForcedInheritancePercentage = InheritanceCalc.CalculateForcedInheritancePercentageForKid();
                                    heir.InheritancePercentage = InheritanceCalc.CalculateInheritancePercentageForKid();
                                    heir.ForcedInheritanceAmount = InheritanceCalc.CalculateForcedInheritanceAmountForKid();
                                    heir.InheritanceAmount = InheritanceCalc.CalculateInheritanceAmountForKid();
                                }
                            </label>
                        </label>
                    </div>
                </div>
            </div>
        }

        <div class="divider"></div>

        @for (int i = 0; i < HeirRepository.Instance.ReturnOther().Count; i++)
        {
            var heir = HeirRepository.Instance.ReturnOther()[i];

            <div class="kids-grid">
                <div class="card h-100" style="position: relative; width: 270px;">
                    <div class="card-header bg-black text-white">
                        <h5>Arving @(i + 1)</h5>
                    </div>

                    <div class="card-body">
                        <label>
                            <input type="text" class="nameTxt" @bind="heir.Name" />
                        </label>
                    </div>
                </div>
            </div>
        }


    </div>

}

@code {


    private void OnKidsAmountChanged(ChangeEventArgs input)
    {
        int newKidsAmount = int.Parse(input.Value.ToString() ?? "0");
        Client.KidsAmount = newKidsAmount;

        HeirRepository.Instance.GenerateHeirs(HeirType.Kid);
    }

    private void OnMarriedChanged(ChangeEventArgs input)
    {
        bool isMarried = (bool)input.Value;
        Client.Married = isMarried;

        if (isMarried)
        {
            HeirRepository.Instance.GenerateHeirs(HeirType.Spouse);
        }

        else if (!isMarried)
        {
            HeirRepository.Instance.DeleteSpouse();
        }
    }

    private void AddClick()
    {
        HeirRepository.Instance.GenerateHeirs(HeirType.Other);
    }
}