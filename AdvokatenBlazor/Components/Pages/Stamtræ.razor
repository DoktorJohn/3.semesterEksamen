@page "/"
@rendermode InteractiveServer

@* Importerer vores CSS og Crimson font *@
<link rel="stylesheet" href="Stamtrae.css" />
<link href="https://fonts.googleapis.com/css2?family=Crimson+Pro:wght@400;700&display=swap" rel="stylesheet">

@* Top menu i HTMLen *@
<div class="TopBar">
    <div class="barContent">
        <label class="TitleClass">
            Mit stamtræ
        </label>
        <label class="MarriedClass">
            Har du en ægtefælle?
            <input type="checkbox" id="marriageField" @onchange="OnMarriedChanged" checked="@isMarried" />
        </label>

        <button class="FamilyBtn" @onclick="OnKidsAmountChanged">
            Tilføj barn
        </button>

        <button class="FamilyBtn" @onclick="AddClick">
            Tilføj andre arvinger
        </button>
    </div>
</div>

@* HTML for vores arvinger *@
<div class="inheritance-tree">


    @* Ægtefælle kort genereres hvis kunden er gift *@
    @if (isMarried)
    {
        CalculateSpouseHeritance();

        <div class="married-grid">
            <div class="card h-100" style="position: relative; width: 280px;">
                <div class="card-header bg-black text-white">
                    <button type="button" @onclick="() => DeleteSpouseCard()" class="btn-close" style="position:absolute; right:10px; top:0px; background: transparent; border: none; color: red; font-size: 1.5rem;">
                        X
                    </button>
                    <input type="text" class="nameTxt" @bind="Spouse.Name" placeholder="Navngiv ægtefælle" />
                </div>
                <div class="card-body">
                    <label class="PercentageTxt" style="color:black">

                        <label>
                            <u>
                                Lovpligtige afgrænsninger
                            </u>
                        </label>

                        <br />

                        <label>
                            Arvefordeling: @Spouse.MinInheritancePercentage% - @Spouse.MaxInheritancePercentage%
                        </label>
                    </label>
                </div>
            </div>
        </div>

        <div class="divider"></div>
    }

    

    @* Børnekort genereres for hvert barnearving der er i vores liste af børnearvinger. *@
    @foreach (var heir in HeirRepository.Instance.ReturnKids())
    {
        CalculateKidHeritance();

        <div class="kids-grid">
            <div class="card h-100" style="position: relative; width: 280px;">
                <div class="card-header bg-black text-white">
                    <button type="button" @onclick="() => DeleteKidCard(heir)" class="btn-close" style="position:absolute; right:10px; top:0px; background: transparent; border: none; color: red; font-size: 1.5rem;">
                        X
                    </button>
                    <input type="text" class="nameTxt" @bind="heir.Name" placeholder="Navngiv barn" />
                </div>

                <div class="card-body">
                    <label class="PercentageTxt" style="color:black">

                        <label>
                            <u>
                                Lovpligtige afgrænsninger
                            </u>
                        </label>

                        <br />

                        <label>
                            Arvefordeling: @heir.MinInheritancePercentage% - @heir.MaxInheritancePercentage%
                        </label>
                    </label>
                </div>
            </div>
        </div>
    }

    @if (HeirRepository.Instance.ReturnKids().Count > 0)
    {
        <div class="divider"></div>
    }
    

    @* Andre arvinger genereres fra vores liste af arvigner med enum = Other *@
    @foreach (var other in HeirRepository.Instance.ReturnOther())
    {
        <div class="kids-grid">
            <div class="card h-100" style="position: relative; width: 280px;">
                <div class="card-header bg-black text-white">
                    <button type="button" @onclick="() => DeleteOtherCard(other)" class="btn-close" style="position:absolute; right:10px; top:0px; background: transparent; border: none; color: red; font-size: 1.5rem;">
                        X
                    </button>
                    <input type="text" class="nameTxt" @bind="other.Name" placeholder="Navngiv ekstern arving" />
                </div>

                <div class="card-body">
                    <label class="PercentageTxt" style="color:black;">

                        <label>
                            <u>
                                Lovpligtige afgrænsninger
                            </u>
                        </label>

                        <br />

                        <label>
                            Arvefordeling: 0% - 75%
                        </label>
                    </label>


                </div>
            </div>
        </div>
    }

</div>

@code {
    bool isMarried = ClientViewModel.Instance.IsMarried;
    int kidsAmount = ClientViewModel.Instance.KidsAmount;
    double otherMaxPercentage = ClientViewModel.Instance.TotalAmount * 0.75; //0.75 magisk tal = 3. parts arving kan under alle omstændigheder kun arve maksimalt 75%.
    Heir Spouse = HeirRepository.Instance.Spouse;

    // Sætter antallet af børn, alt efter hvad brugeren har skrevet af tal i vores inputfelt.
    private void OnKidsAmountChanged()
    {
        int kidsCreated = HeirRepository.Instance.ReturnKids().Count() + 1;

        ClientViewModel.Instance.CreateKid(kidsCreated);

    }

    //Sætter ægtefællestatus for kunden til true, og generer derefter en ægtefælle fra metode i vores viewmodel.
    private void OnMarriedChanged(ChangeEventArgs input)
    {
        if (input.Value != null)
        {
            ClientViewModel.Instance.SetMaritalStatus((bool)input.Value);
            isMarried = ClientViewModel.Instance.IsMarried;
        }
    }

    private void DeleteKidCard(Heir heir)
    {
        int kidsCreated = HeirRepository.Instance.ReturnKids().Count() - 1;
        ClientViewModel.Instance.DeleteKid(heir, kidsCreated);
    }

    private void DeleteSpouseCard()
    {
        ClientViewModel.Instance.DeleteSpouse();
        isMarried = false;
    }

    private void DeleteOtherCard(Heir heir)
    {
        ClientViewModel.Instance.DeleteOther(heir);
    }

    //Genererer en ny "other" arving
    private void AddClick()
    {
        HeirRepository.Instance.GenerateHeir(HeirType.Other);
    }

    //Udregner alle ægtefælle properties
    private void CalculateSpouseHeritance()
    {
        SpouseCalculations.CalculateAll();
        Spouse = HeirRepository.Instance.Spouse;
    }

    //Udregner alle ægtefælle properties
    private void CalculateKidHeritance()
    {
        KidCalculations.CalculateAll();
        Spouse = HeirRepository.Instance.Spouse;
    }
}